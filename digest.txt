Directory structure:
└── ai-agent-miccai/
    ├── db.sqlite3
    ├── manage.py
    ├── restart_server.sh
    ├── run_daphne.sh
    ├── django_cache/
    │   ├── 29c7d759d06a6c6b95a3aeaf471a09cd.djcache
    │   ├── 5795ac0ce422541d38aa53e84de75622.djcache
    │   ├── 5f671c57ae23763ab6c244f8b0b68aac.djcache
    │   ├── 7039422506cebba7664e7ff22729ba8d.djcache
    │   ├── 730bd0cb8ed55368cf3d8d87000f5cb0.djcache
    │   ├── 828a8632bb394fae7bd22eaddb6bc332.djcache
    │   ├── a7cfd3b451d17d002111ce4d549754dc.djcache
    │   ├── ad1bd08dac057dd3c3b836c85628aa2e.djcache
    │   └── bc859cbf40cbe259b595f83ece3549d3.djcache
    ├── ncbi_agent/
    │   ├── __init__.py
    │   ├── asgi.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    └── ncbi_chat/
        ├── __init__.py
        ├── admin.py
        ├── admin_site.py
        ├── agent_views.py
        ├── apps.py
        ├── config_models.py
        ├── consumers.py
        ├── models.py
        ├── tests.py
        ├── urls.py
        ├── views.py
        ├── management/
        │   └── commands/
        │       └── init_config.py
        ├── migrations/
        │   ├── 0001_initial.py
        │   ├── 0002_systemconfiguration.py
        │   ├── 0003_alter_systemconfiguration_parameter_name.py
        │   └── __init__.py
        ├── services/
        │   ├── __init__.py
        │   ├── ollama_service.py
        │   └── settings.py
        └── templates/
            ├── base.html
            ├── ncbi_chat/
            │   ├── agent_detail.html
            │   ├── agent_list.html
            │   └── chat.html
            └── registration/
                └── login.html

================================================
File: db.sqlite3
================================================
[Non-text file]


================================================
File: manage.py
================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ncbi_agent.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()



================================================
File: restart_server.sh
================================================
#!/bin/zsh
# Kill any existing daphne processes
pkill -f daphne

# Set environment variables
export DJANGO_SETTINGS_MODULE=ncbi_agent.settings
export PYTHONPATH=/Users/sainatarajan/ddrive/github/ai-agent-miccai

# Start daphne
daphne -b 0.0.0.0 -p 8000 ncbi_agent.asgi:application



================================================
File: run_daphne.sh
================================================
#!/bin/zsh
export DJANGO_SETTINGS_MODULE=ncbi_agent.settings
export PYTHONPATH=/Users/sainatarajan/ddrive/github/ai-agent-miccai
daphne -b 0.0.0.0 -p 8000 ncbi_agent.asgi:application



================================================
File: django_cache/29c7d759d06a6c6b95a3aeaf471a09cd.djcache
================================================
[Non-text file]


================================================
File: django_cache/5795ac0ce422541d38aa53e84de75622.djcache
================================================
[Non-text file]


================================================
File: django_cache/5f671c57ae23763ab6c244f8b0b68aac.djcache
================================================
[Non-text file]


================================================
File: django_cache/7039422506cebba7664e7ff22729ba8d.djcache
================================================
[Non-text file]


================================================
File: django_cache/730bd0cb8ed55368cf3d8d87000f5cb0.djcache
================================================
[Non-text file]


================================================
File: django_cache/828a8632bb394fae7bd22eaddb6bc332.djcache
================================================
[Non-text file]


================================================
File: django_cache/a7cfd3b451d17d002111ce4d549754dc.djcache
================================================
[Non-text file]


================================================
File: django_cache/ad1bd08dac057dd3c3b836c85628aa2e.djcache
================================================
[Non-text file]


================================================
File: django_cache/bc859cbf40cbe259b595f83ece3549d3.djcache
================================================
[Non-text file]


================================================
File: ncbi_agent/__init__.py
================================================



================================================
File: ncbi_agent/asgi.py
================================================
"""
ASGI config for ncbi_agent project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os
import django
from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack
from channels.security.websocket import AllowedHostsOriginValidator
from django.urls import path

# Set up Django settings
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ncbi_agent.settings")
django.setup()

# Import after Django setup to avoid apps registry errors
from ncbi_chat.consumers import ChatConsumer

websocket_urlpatterns = [
    path('ws/chat/', ChatConsumer.as_asgi()),
]

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AllowedHostsOriginValidator(
        AuthMiddlewareStack(
            URLRouter(websocket_urlpatterns)
        )
    ),
})



================================================
File: ncbi_agent/settings.py
================================================
"""
Django settings for ncbi_agent project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-hwu#hm1giz8=aum#$nm6__5v3qtc3fg!q6dg#y9*dh+j9x!)f7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "channels",
    "corsheaders",  # Add CORS support
    "ncbi_chat",
]

# Channels settings
ASGI_APPLICATION = "ncbi_agent.asgi.application"

# For development, use in-memory channel layer
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# WebSocket settings
WEBSOCKET_ACCEPT_ALL = True  # For development only

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Add CORS middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ncbi_agent.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'ncbi_chat' / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ncbi_agent.wsgi.application"


# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'django_cache'),
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Ollama Configuration
OLLAMA_CONFIG = {
    'host': os.getenv('OLLAMA_HOST', 'http://localhost:11434'),
    'models': {
        'general': 'llama3.1:8b',
        'analysis': 'mistral:7b', 
        'code': 'codellama:13b',
        'biomedical': 'llama3.1:8b'
    },
    'timeout': int(os.getenv('OLLAMA_TIMEOUT', 30)),
    'max_retries': 3
}

# Enable AI enhancement
ENABLE_AI_ENHANCEMENT = os.getenv('ENABLE_AI_ENHANCEMENT', 'true').lower() == 'true'

# Logging configuration for Ollama
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'ollama.log',
        },
    },
    'loggers': {
        'ncbi_chat.services.ollama_service': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOW_CREDENTIALS = True



================================================
File: ncbi_agent/urls.py
================================================
"""
URL configuration for ncbi_agent project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""

from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from ncbi_chat.admin_site import admin_site

urlpatterns = [
    path("admin/", admin_site.urls),
    path("accounts/login/", auth_views.LoginView.as_view(), name="login"),
    path("accounts/logout/", auth_views.LogoutView.as_view(), name="logout"),
    path("", include("ncbi_chat.urls")),
]



================================================
File: ncbi_agent/wsgi.py
================================================
"""
WSGI config for ncbi_agent project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ncbi_agent.settings")

application = get_wsgi_application()



================================================
File: ncbi_chat/__init__.py
================================================



================================================
File: ncbi_chat/admin.py
================================================
from django.contrib import admin
from django.contrib.auth.models import User, Group
from django.contrib.auth.admin import UserAdmin
from django.utils.html import format_html
from .models import Agent, Query, QueryResult, MCPTool
from .config_models import SystemConfiguration
from .admin_site import admin_site

# Re-register UserAdmin with our custom admin site
admin_site.register(User, UserAdmin)
admin_site.register(Group)

@admin.register(SystemConfiguration, site=admin_site)
class SystemConfigurationAdmin(admin.ModelAdmin):
    list_display = ('parameter_name_display', 'masked_value', 'description_short', 'last_modified')
    list_filter = ('parameter_name',)
    search_fields = ('parameter_name', 'description')
    readonly_fields = ('last_modified',)
    fieldsets = (
        (None, {
            'fields': ('parameter_name', 'parameter_value', 'description', 'last_modified'),
            'description': 'Configure system-wide parameters for the NCBI Multi-Agent System'
        }),
    )
    
    def parameter_name_display(self, obj):
        return obj.get_parameter_name_display()
    parameter_name_display.short_description = 'Parameter'
    
    def masked_value(self, obj):
        if obj.parameter_name == SystemConfiguration.NCBI_API_KEY and obj.parameter_value:
            return '********' + obj.parameter_value[-4:]
        return obj.parameter_value
    masked_value.short_description = 'Value'
    
    def description_short(self, obj):
        return format_html('<span title="{}">{}</span>', 
                         obj.description, 
                         obj.description[:50] + '...' if len(obj.description) > 50 else obj.description)
    description_short.short_description = 'Description'
    
    def has_delete_permission(self, request, obj=None):
        # Prevent deletion of configuration parameters
        return False
    
    def has_add_permission(self, request):
        # Only allow adding if parameter doesn't exist
        existing_params = set(SystemConfiguration.objects.values_list('parameter_name', flat=True))
        all_params = set(dict(SystemConfiguration.PARAMETER_CHOICES).keys())
        return bool(all_params - existing_params)

@admin.register(Agent, site=admin_site)
class AgentAdmin(admin.ModelAdmin):
    list_display = ('name', 'agent_type', 'status', 'last_heartbeat')
    list_filter = ('agent_type', 'status')
    search_fields = ('name',)

@admin.register(Query, site=admin_site)
class QueryAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'query_type', 'status', 'timestamp', 'execution_time')
    list_filter = ('status', 'query_type')
    search_fields = ('query_text', 'user__username')
    date_hierarchy = 'timestamp'

@admin.register(QueryResult, site=admin_site)
class QueryResultAdmin(admin.ModelAdmin):
    list_display = ('id', 'query', 'source_database', 'agent', 'relevance_score')
    list_filter = ('source_database', 'agent')
    search_fields = ('query__query_text',)

@admin.register(MCPTool, site=admin_site)
class MCPToolAdmin(admin.ModelAdmin):
    list_display = ('name', 'agent', 'status', 'execution_count', 'average_execution_time')
    list_filter = ('status', 'agent')
    search_fields = ('name', 'description')



================================================
File: ncbi_chat/admin_site.py
================================================
from django.contrib.admin import AdminSite
from django.utils.translation import gettext_lazy as _

class NCBIAdminSite(AdminSite):
    site_title = _('NCBI Agent Admin')
    site_header = _('NCBI Multi-Agent Research System Administration')
    index_title = _('System Administration')

# Create the admin site instance
admin_site = NCBIAdminSite(name='ncbi_admin')

# Make sure to export the admin_site
__all__ = ['admin_site']



================================================
File: ncbi_chat/agent_views.py
================================================
from django.views.generic import ListView, DetailView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.http import JsonResponse
from django.views import View
from .models import Agent, MCPTool

class AgentListView(LoginRequiredMixin, ListView):
    model = Agent
    template_name = 'ncbi_chat/agent_list.html'
    context_object_name = 'agents'

class AgentDetailView(LoginRequiredMixin, DetailView):
    model = Agent
    template_name = 'ncbi_chat/agent_detail.html'
    context_object_name = 'agent'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['tools'] = MCPTool.objects.filter(agent=self.object)
        return context

class AgentStatusView(LoginRequiredMixin, View):
    def get(self, request, *args, **kwargs):
        agents = Agent.objects.all()
        data = []
        
        for agent in agents:
            agent_data = {
                'id': agent.id,
                'name': agent.name,
                'type': agent.agent_type,
                'status': agent.status,
                'last_heartbeat': agent.last_heartbeat.isoformat() if agent.last_heartbeat else None,
                'active_tools': [
                    {
                        'name': tool.name,
                        'status': tool.status
                    }
                    for tool in agent.get_active_tools()
                ]
            }
            data.append(agent_data)
        
        return JsonResponse({'agents': data})



================================================
File: ncbi_chat/apps.py
================================================
from django.apps import AppConfig


class NcbiChatConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "ncbi_chat"



================================================
File: ncbi_chat/config_models.py
================================================
from django.db import models
from django.core.cache import cache

class SystemConfiguration(models.Model):
    """Singleton model for system-wide configuration parameters"""
    # NCBI Configuration
    NCBI_API_KEY = 'ncbi_api_key'
    RATE_LIMIT = 'rate_limit'
    MAX_CONCURRENT_QUERIES = 'max_concurrent_queries'
    CACHE_DURATION = 'cache_duration'
    
    # Ollama Configuration
    OLLAMA_HOST = 'ollama_host'
    OLLAMA_MODEL_GENERAL = 'ollama_model_general'
    OLLAMA_MODEL_BIOMEDICAL = 'ollama_model_biomedical'
    OLLAMA_MODEL_ANALYSIS = 'ollama_model_analysis'
    OLLAMA_TIMEOUT = 'ollama_timeout'
    
    PARAMETER_CHOICES = [
        # NCBI Parameters
        (NCBI_API_KEY, 'NCBI API Key'),
        (RATE_LIMIT, 'API Rate Limit (requests per second)'),
        (MAX_CONCURRENT_QUERIES, 'Maximum Concurrent Queries'),
        (CACHE_DURATION, 'Cache Duration (seconds)'),
        # Ollama Parameters
        (OLLAMA_HOST, 'Ollama API Host'),
        (OLLAMA_MODEL_GENERAL, 'General Purpose Model'),
        (OLLAMA_MODEL_BIOMEDICAL, 'Biomedical Model'),
        (OLLAMA_MODEL_ANALYSIS, 'Analysis Model'),
        (OLLAMA_TIMEOUT, 'Ollama Request Timeout (seconds)'),
    ]
    
    parameter_name = models.CharField(max_length=50, choices=PARAMETER_CHOICES, unique=True)
    parameter_value = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    last_modified = models.DateTimeField(auto_now=True)
    
    def save(self, *args, **kwargs):
        # First save to database
        super().save(*args, **kwargs)
        try:
            # Then update cache
            cache.set(f'config_{self.parameter_name}', self.parameter_value, timeout=None)
        except Exception:
            # If cache fails, continue anyway as we have the DB backup
            pass
    
    @classmethod
    def get_value(cls, parameter_name, default=None):
        try:
            # Try to get from cache first
            cached_value = cache.get(f'config_{parameter_name}')
            if cached_value is not None:
                return cached_value
        except Exception:
            pass
            
        # If not in cache or cache fails, get from database
        try:
            config = cls.objects.get(parameter_name=parameter_name)
            value = config.parameter_value
            try:
                # Try to update cache
                cache.set(f'config_{parameter_name}', value, timeout=None)
            except Exception:
                pass
            return value
        except cls.DoesNotExist:
            return default
    
    def __str__(self):
        return f"{self.get_parameter_name_display()}: {self.parameter_value}"
    
    class Meta:
        verbose_name = "System Configuration"
        verbose_name_plural = "System Configuration"



================================================
File: ncbi_chat/consumers.py
================================================
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.contrib.auth.models import User
from .models import Query, Agent
from .services import ollama_service

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        if self.scope["user"].is_anonymous:
            await self.close()
            return
            
        self.user = self.scope["user"]
        self.room_group_name = f"chat_{self.user.id}"
        
        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        try:
            data = json.loads(text_data)
            query_text = data.get('message')
            model = data.get('model', 'llama3.2:latest')  # Default to latest model
            
            if not query_text:
                return
                
            # Create query in database
            query = await self.create_query(query_text)
            
            # Send acknowledgment
            await self.send(text_data=json.dumps({
                'type': 'query_received',
                'query_id': query.id,
                'message': query_text
            }))
            
            # Generate response with conversation history
            response = await ollama_service.generate_response(
                prompt=query_text,
                model_type=model,
                system_prompt="You are a helpful biomedical research assistant. Maintain context from the conversation history when answering.",
                user_id=str(self.user.id)  # Pass user ID for context
            )
            
            # Send response
            await self.send(text_data=json.dumps({
                'type': 'processing_update',
                'message': response['response'] if response['success'] else response['error'],
                'model_used': model,
                'success': response['success']
            }))
            
        except Exception as e:
            await self.send(text_data=json.dumps({
                'type': 'error',
                'message': str(e)
            }))

    async def query_update(self, event):
        # Send update to WebSocket
        await self.send(text_data=json.dumps(event))

    @database_sync_to_async
    def create_query(self, query_text):
        return Query.objects.create(
            user=self.user,
            query_text=query_text,
            query_type='natural_language',
            status='processing'
        )
    
    @database_sync_to_async
    def update_query(self, query_id, search_strategy):
        query = Query.objects.get(id=query_id)
        query.status = 'ready'
        query.save()
        return query



================================================
File: ncbi_chat/models.py
================================================
from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from .config_models import SystemConfiguration

class Agent(models.Model):
    STATUS_CHOICES = [
        ('online', 'Online'),
        ('busy', 'Busy'),
        ('error', 'Error'),
        ('offline', 'Offline'),
    ]
    
    name = models.CharField(max_length=100)
    agent_type = models.CharField(max_length=50)  # 'utility' or 'domain'
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='offline')
    last_heartbeat = models.DateTimeField(auto_now=True)
    capabilities = models.JSONField(default=dict)
    performance_metrics = models.JSONField(default=dict)

    def get_active_tools(self):
        return MCPTool.objects.filter(agent=self, status='active')

    def __str__(self):
        return f"{self.name} ({self.agent_type}) - {self.status}"

class Query(models.Model):
    STATUS_CHOICES = [
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('error', 'Error'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    query_text = models.TextField()
    query_type = models.CharField(max_length=50)
    timestamp = models.DateTimeField(auto_now_add=True)
    assigned_agents = models.ManyToManyField(Agent)
    execution_time = models.FloatField(null=True)
    result_count = models.IntegerField(null=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='processing')
    
    def __str__(self):
        return f"Query {self.id} by {self.user.username} - {self.status}"

class QueryResult(models.Model):
    query = models.ForeignKey(Query, on_delete=models.CASCADE)
    source_database = models.CharField(max_length=50)
    result_data = models.JSONField()
    relevance_score = models.FloatField()
    agent = models.ForeignKey(Agent, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-relevance_score']
    
    def __str__(self):
        return f"Result for Query {self.query.id} from {self.source_database}"

class MCPTool(models.Model):
    STATUS_CHOICES = [
        ('active', 'Active'),
        ('inactive', 'Inactive'),
        ('error', 'Error'),
    ]
    
    name = models.CharField(max_length=100)
    agent = models.ForeignKey(Agent, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='inactive')
    last_execution = models.DateTimeField(null=True)
    execution_count = models.IntegerField(default=0)
    average_execution_time = models.FloatField(default=0.0)
    description = models.TextField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.name} ({self.agent.name})"



================================================
File: ncbi_chat/tests.py
================================================
from django.test import TestCase

# Create your tests here.



================================================
File: ncbi_chat/urls.py
================================================
from django.urls import path
from .views import ChatView, get_ollama_models
from .agent_views import AgentListView, AgentDetailView, AgentStatusView

app_name = 'ncbi_chat'

urlpatterns = [
    path('', ChatView.as_view(), name='chat'),
    path('agents/', AgentListView.as_view(), name='agent_list'),
    path('agents/<int:pk>/', AgentDetailView.as_view(), name='agent_detail'),
    path('api/agents/status/', AgentStatusView.as_view(), name='agent_status'),
    path('api/ollama-models/', get_ollama_models, name='ollama_models'),
]



================================================
File: ncbi_chat/views.py
================================================
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.generic import TemplateView
from .models import Agent
from django.http import JsonResponse
from .services import ollama_service
import asyncio
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import csrf_exempt
from channels.db import database_sync_to_async
import json

@method_decorator(login_required, name='dispatch')
class ChatView(TemplateView):
    template_name = 'ncbi_chat/chat.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['agents'] = Agent.objects.all()
        return context

@csrf_exempt
@require_http_methods(["GET"])
async def get_ollama_models(request):
    """Get available Ollama models"""
    try:
        models = await ollama_service.get_available_models()
        return JsonResponse({'models': models})
    except Exception as e:
        return JsonResponse({
            'error': str(e),
            'models': []
        }, status=500)



================================================
File: ncbi_chat/management/commands/init_config.py
================================================
from django.core.management.base import BaseCommand
from ncbi_chat.config_models import SystemConfiguration

class Command(BaseCommand):
    help = 'Initialize system configuration with default values'

    def handle(self, *args, **kwargs):
        default_configs = [
            # NCBI Configuration
            {
                'parameter_name': SystemConfiguration.NCBI_API_KEY,
                'parameter_value': '',
                'description': 'API key for NCBI E-utilities. Get one at: https://www.ncbi.nlm.nih.gov/account/settings/'
            },
            {
                'parameter_name': SystemConfiguration.RATE_LIMIT,
                'parameter_value': '3',
                'description': 'Maximum number of requests per second to NCBI E-utilities'
            },
            {
                'parameter_name': SystemConfiguration.MAX_CONCURRENT_QUERIES,
                'parameter_value': '5',
                'description': 'Maximum number of concurrent queries that can be processed'
            },
            {
                'parameter_name': SystemConfiguration.CACHE_DURATION,
                'parameter_value': '86400',
                'description': 'Duration in seconds to cache query results (default: 24 hours)'
            },
            # Ollama Configuration
            {
                'parameter_name': SystemConfiguration.OLLAMA_HOST,
                'parameter_value': 'http://localhost:11434',
                'description': 'Ollama API host address'
            },
            {
                'parameter_name': SystemConfiguration.OLLAMA_MODEL_GENERAL,
                'parameter_value': 'llama2:latest',
                'description': 'General purpose language model (llama3.2) for query understanding'
            },
            {
                'parameter_name': SystemConfiguration.OLLAMA_MODEL_BIOMEDICAL,
                'parameter_value': 'llama2:latest',
                'description': 'Specialized model (llama3.2) for biomedical queries'
            },
            {
                'parameter_name': SystemConfiguration.OLLAMA_MODEL_ANALYSIS,
                'parameter_value': 'llama2:latest',
                'description': 'Model (llama3.2) for analyzing research results'
            },
            {
                'parameter_name': SystemConfiguration.OLLAMA_TIMEOUT,
                'parameter_value': '30',
                'description': 'Timeout in seconds for Ollama API requests'
            },
        ]

        for config in default_configs:
            _, created = SystemConfiguration.objects.get_or_create(
                parameter_name=config['parameter_name'],
                defaults={
                    'parameter_value': config['parameter_value'],
                    'description': config['description']
                }
            )
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f"Created {config['parameter_name']} configuration")
                )
            else:
                # Update existing configurations to ensure they use the correct model
                if 'model' in config['parameter_name']:
                    obj = SystemConfiguration.objects.get(parameter_name=config['parameter_name'])
                    obj.parameter_value = config['parameter_value']
                    obj.description = config['description']
                    obj.save()
                    self.stdout.write(
                        self.style.SUCCESS(f"Updated {config['parameter_name']} to use llama3.2")
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(f"Configuration {config['parameter_name']} already exists")
                    )



================================================
File: ncbi_chat/migrations/0001_initial.py
================================================
# Generated by Django 4.2.23 on 2025-06-16 10:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("agent_type", models.CharField(max_length=50)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("online", "Online"),
                            ("busy", "Busy"),
                            ("error", "Error"),
                            ("offline", "Offline"),
                        ],
                        default="offline",
                        max_length=20,
                    ),
                ),
                ("last_heartbeat", models.DateTimeField(auto_now=True)),
                ("capabilities", models.JSONField(default=dict)),
                ("performance_metrics", models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name="Query",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query_text", models.TextField()),
                ("query_type", models.CharField(max_length=50)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("execution_time", models.FloatField(null=True)),
                ("result_count", models.IntegerField(null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("error", "Error"),
                        ],
                        default="processing",
                        max_length=20,
                    ),
                ),
                ("assigned_agents", models.ManyToManyField(to="ncbi_chat.agent")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QueryResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("source_database", models.CharField(max_length=50)),
                ("result_data", models.JSONField()),
                ("relevance_score", models.FloatField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ncbi_chat.agent",
                    ),
                ),
                (
                    "query",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ncbi_chat.query",
                    ),
                ),
            ],
            options={
                "ordering": ["-relevance_score"],
            },
        ),
        migrations.CreateModel(
            name="MCPTool",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("error", "Error"),
                        ],
                        default="inactive",
                        max_length=20,
                    ),
                ),
                ("last_execution", models.DateTimeField(null=True)),
                ("execution_count", models.IntegerField(default=0)),
                ("average_execution_time", models.FloatField(default=0.0)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ncbi_chat.agent",
                    ),
                ),
            ],
        ),
    ]



================================================
File: ncbi_chat/migrations/0002_systemconfiguration.py
================================================
# Generated by Django 4.2.23 on 2025-06-16 10:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("ncbi_chat", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="SystemConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "parameter_name",
                    models.CharField(
                        choices=[
                            ("ncbi_api_key", "NCBI API Key"),
                            ("rate_limit", "API Rate Limit (requests per second)"),
                            ("max_concurrent_queries", "Maximum Concurrent Queries"),
                            ("cache_duration", "Cache Duration (seconds)"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("parameter_value", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "System Configuration",
                "verbose_name_plural": "System Configuration",
            },
        ),
    ]



================================================
File: ncbi_chat/migrations/0003_alter_systemconfiguration_parameter_name.py
================================================
# Generated by Django 4.2.23 on 2025-06-16 10:45

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("ncbi_chat", "0002_systemconfiguration"),
    ]

    operations = [
        migrations.AlterField(
            model_name="systemconfiguration",
            name="parameter_name",
            field=models.CharField(
                choices=[
                    ("ncbi_api_key", "NCBI API Key"),
                    ("rate_limit", "API Rate Limit (requests per second)"),
                    ("max_concurrent_queries", "Maximum Concurrent Queries"),
                    ("cache_duration", "Cache Duration (seconds)"),
                    ("ollama_host", "Ollama API Host"),
                    ("ollama_model_general", "General Purpose Model"),
                    ("ollama_model_biomedical", "Biomedical Model"),
                    ("ollama_model_analysis", "Analysis Model"),
                    ("ollama_timeout", "Ollama Request Timeout (seconds)"),
                ],
                max_length=50,
                unique=True,
            ),
        ),
    ]



================================================
File: ncbi_chat/migrations/__init__.py
================================================



================================================
File: ncbi_chat/services/__init__.py
================================================
from .ollama_service import ollama_service

__all__ = ['ollama_service']



================================================
File: ncbi_chat/services/ollama_service.py
================================================
import asyncio
import json
import logging
from typing import Dict, List, Optional, Any
import ollama
from django.core.cache import cache
from .settings import get_ollama_settings

logger = logging.getLogger(__name__)

class OllamaService:
    def __init__(self):
        self._setup_service()
        self.conversation_history = {}  # Store conversation history per user
        self.max_history_length = 10    # Maximum number of messages to keep in history

    def _setup_service(self):
        """Setup service with current settings"""
        settings = get_ollama_settings()
        host = settings['host']
        logger.info(f"Setting up Ollama client with host: {host}")
        
        self.client = ollama.AsyncClient(host=host)
        self.models = settings['models']
        self.timeout = settings['timeout']
        self.max_retries = settings['max_retries']
        
        # Log current configuration
        logger.info(f"Ollama service initialized with models: {self.models}")

    async def check_ollama_connection(self) -> bool:
        """Check if Ollama server is accessible"""
        try:
            logger.info("Checking Ollama connection...")
            response = await self.client.list()
            if response and 'models' in response:
                models = [m['name'] for m in response['models']]
                logger.info(f"Successfully connected to Ollama. Available models: {models}")
                return True
            else:
                logger.error("Connected to Ollama but received invalid response")
                return False
        except Exception as e:
            logger.error(f"Failed to connect to Ollama: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False

    def _normalize_model_name(self, model_name: str) -> str:
        """Normalize model name to match Ollama's format"""
        # If the model name includes a variant (like :1b), keep it
        # Otherwise, append :latest
        if ':' not in model_name:
            model_name = f"{model_name}:latest"
        return model_name

    async def generate_response(self, prompt: str, model_type: str = 'general', 
                              system_prompt: str = None, context: Dict = None,
                              user_id: str = None) -> Dict:
        """Generate response using specified Ollama model"""
        # Check Ollama connection first
        if not await self.check_ollama_connection():
            return {
                'success': False,
                'error': "Unable to connect to Ollama server. Please make sure it's running.",
                'model': model_type
            }
            
        # If model_type is a full model name (e.g., llama3.2:1b), use it directly
        # Otherwise, try to get it from our configured models
        model = model_type if ':' in model_type else self.models.get(model_type, self.models['general'])
        model = self._normalize_model_name(model)
        
        logger.info(f"Attempting to use model: {model}")
        models = await self.get_available_models()
        logger.info(f"Current available models: {[m['name'] for m in models]}")
            
        if not await self._ensure_model_available(model):
            return {
                'success': False,
                'error': f"Model {model} is not available. Available models: {[m['name'] for m in models]}",
                'model': model
            }
        
        # Build prompt with conversation history
        full_prompt = self._build_prompt(prompt, system_prompt, context, user_id)
        
        for attempt in range(self.max_retries):
            try:
                response = await self.client.generate(
                    model=model,
                    prompt=full_prompt,
                    options={
                        'temperature': 0.7,
                        'top_p': 0.9,
                        'num_ctx': 4096
                    }
                )
                
                # Add to conversation history if successful
                if user_id:
                    self.add_to_history(user_id, "user", prompt)
                    self.add_to_history(user_id, "assistant", response['response'])
                
                return {
                    'success': True,
                    'response': response['response'],
                    'model': model,
                    'tokens': response.get('eval_count', 0),
                    'generation_time': response.get('eval_duration', 0) / 1e9
                }
            except Exception as e:
                logger.error(f"Ollama generation attempt {attempt + 1} failed: {e}")
                if attempt == self.max_retries - 1:
                    return {
                        'success': False,
                        'error': str(e),
                        'model': model
                    }
                await asyncio.sleep(2 ** attempt)

    async def _ensure_model_available(self, model_name: str) -> bool:
        """Ensure the requested model is available"""
        try:
            # List available models
            response = await self.client.list()
            logger.info(f"Raw Ollama response: {response}")
            
            if not response or 'models' not in response:
                logger.error("Invalid response from Ollama list command")
                return False
                
            models = response.get('models', [])
            available_models = [m['name'] for m in models]
            logger.info(f"Available models: {available_models}")
            
            if model_name not in available_models:
                logger.warning(f"Model {model_name} not found in available models: {available_models}")
                return False
            
            logger.info(f"Model {model_name} is available")
            return True
        except Exception as e:
            logger.error(f"Error checking model availability: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    def _get_user_history(self, user_id: str) -> List[Dict]:
        """Get conversation history for a user"""
        return self.conversation_history.get(user_id, [])
    
    def add_to_history(self, user_id: str, role: str, content: str):
        """Add a message to the user's conversation history"""
        if user_id not in self.conversation_history:
            self.conversation_history[user_id] = []
            
        history = self.conversation_history[user_id]
        history.append({
            'role': role,
            'content': content,
            'timestamp': asyncio.get_running_loop().time()
        })
        
        # Keep only the last N messages
        if len(history) > self.max_history_length:
            history.pop(0)
    
    def _build_prompt(self, prompt: str, system_prompt: str = None, 
                     context: Dict = None, user_id: str = None) -> str:
        """Build comprehensive prompt with context and conversation history"""
        parts = []
        
        if system_prompt:
            parts.append(f"SYSTEM: {system_prompt}")
        
        if context:
            parts.append(f"CONTEXT: {json.dumps(context, indent=2)}")
        
        # Add conversation history if available
        if user_id:
            history = self._get_user_history(user_id)
            if history:
                history_text = "\n\n".join([
                    f"{msg['role'].upper()}: {msg['content']}"
                    for msg in history[-5:]  # Include last 5 messages for context
                ])
                parts.append(f"PREVIOUS CONVERSATION:\n{history_text}")
        
        parts.append(f"USER: {prompt}")
        
        return "\n\n".join(parts)
    
    async def parse_research_query(self, query_text: str) -> Dict:
        """Parse biomedical research query using Ollama"""
        system_prompt = """
        You are a biomedical research query parser. Extract structured information from user queries.
        
        Return a JSON object with these fields:
        - research_topic: Main research area/disease
        - genes_proteins: List of specific genes/proteins mentioned
        - study_types: Types of studies needed (clinical_trial, review, case_study, etc.)
        - organisms: Species/organisms of interest
        - date_constraints: Any time limitations mentioned
        - databases: Suggested NCBI databases to search
        - search_strategy: Recommended search approach
        """
        
        response = await self.generate_response(
            prompt=f"Parse this biomedical query: '{query_text}'",
            model_type='biomedical',
            system_prompt=system_prompt
        )
        
        if response['success']:
            try:
                return json.loads(response['response'])
            except json.JSONDecodeError:
                return self._fallback_query_parsing(query_text)
        else:
            return self._fallback_query_parsing(query_text)
    
    def _fallback_query_parsing(self, query_text: str) -> Dict:
        """Simple fallback parsing when Ollama fails"""
        return {
            'research_topic': query_text[:100],
            'genes_proteins': [],
            'study_types': ['publication'],
            'organisms': ['human'],
            'date_constraints': None,
            'databases': ['pubmed'],
            'search_strategy': 'broad_search'
        }
    
    async def analyze_literature_results(self, abstracts: List[Dict]) -> Dict:
        """Analyze literature search results"""
        system_prompt = """
        You are a biomedical literature analyst. Analyze these research paper abstracts and provide:
        
        1. key_themes: Main research themes (max 5)
        2. significant_findings: Important discoveries or conclusions
        3. research_gaps: Identified gaps in current research
        4. clinical_relevance: Clinical applications and implications
        5. emerging_trends: New or growing research directions
        6. methodology_summary: Common research approaches used
        7. quality_assessment: Overall quality and reliability of studies
        
        Return structured JSON format.
        """
        
        abstracts_text = "\n\n".join([
            f"Paper {i+1}: {abstract.get('title', 'No title')}\n{abstract.get('abstract', 'No abstract')}"
            for i, abstract in enumerate(abstracts[:10])
        ])
        
        response = await self.generate_response(
            prompt=f"Analyze these research abstracts:\n\n{abstracts_text}",
            model_type='analysis',
            system_prompt=system_prompt
        )
        
        if response['success']:
            try:
                return json.loads(response['response'])
            except json.JSONDecodeError:
                return self._fallback_analysis()
        else:
            return self._fallback_analysis()
    
    def _fallback_analysis(self) -> Dict:
        """Fallback analysis when Ollama fails"""
        return {
            'key_themes': ['Unable to analyze'],
            'significant_findings': ['Analysis unavailable'],
            'research_gaps': ['Unable to identify'],
            'clinical_relevance': 'Analysis unavailable',
            'emerging_trends': ['Unable to determine'],
            'methodology_summary': 'Analysis unavailable',
            'quality_assessment': 'Unable to assess'
        }
    
    async def generate_search_strategy(self, parsed_query: Dict) -> Dict:
        """Generate optimized NCBI search strategy"""
        system_prompt = """
        You are an NCBI search optimization expert. Based on the parsed query, generate:
        
        1. optimized_terms: Best search terms for NCBI
        2. mesh_terms: Relevant MeSH headings
        3. field_restrictions: Specific field searches [ti], [au], [dp], etc.
        4. database_sequence: Optimal order of database searches
        5. filters: Date, species, publication type filters
        6. boolean_logic: Advanced boolean search strategy
        
        Return JSON format with practical NCBI E-utilities parameters.
        """
        
        response = await self.generate_response(
            prompt=f"Create NCBI search strategy for: {json.dumps(parsed_query)}",
            model_type='biomedical',
            system_prompt=system_prompt
        )
        
        if response['success']:
            try:
                return json.loads(response['response'])
            except json.JSONDecodeError:
                return self._fallback_search_strategy(parsed_query)
        else:
            return self._fallback_search_strategy(parsed_query)
    
    def _fallback_search_strategy(self, parsed_query: Dict) -> Dict:
        """Fallback search strategy"""
        return {
            'optimized_terms': [parsed_query.get('research_topic', '')],
            'mesh_terms': [],
            'field_restrictions': [],
            'database_sequence': ['pubmed'],
            'filters': {},
            'boolean_logic': 'simple'
        }
    
    async def get_available_models(self) -> List[Dict]:
        """Get list of available Ollama models"""
        try:
            response = await self.client.list()
            logger.info(f"Raw Ollama list response: {response}")
            
            if not response or 'models' not in response:
                logger.error("Invalid response from Ollama list command")
                return []
                
            models = response.get('models', [])
            logger.info(f"Parsed models: {models}")
            
            # Sort models by name for consistent display
            models.sort(key=lambda x: x['name'])
            return models
        except Exception as e:
            logger.error(f"Error fetching models: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return []

# Singleton instance
ollama_service = OllamaService()



================================================
File: ncbi_chat/services/settings.py
================================================
from django.conf import settings
from ..config_models import SystemConfiguration

def get_ollama_settings():
    """Get Ollama settings from SystemConfiguration"""
    
    # Get model names or use defaults
    general_model = SystemConfiguration.get_value(
        SystemConfiguration.OLLAMA_MODEL_GENERAL, 
        'llama3.2'  # Will be appended with :latest by _normalize_model_name
    )
    biomedical_model = SystemConfiguration.get_value(
        SystemConfiguration.OLLAMA_MODEL_BIOMEDICAL, 
        'llama3.2'
    )
    analysis_model = SystemConfiguration.get_value(
        SystemConfiguration.OLLAMA_MODEL_ANALYSIS, 
        'llama3.2'
    )
    
    return {
        'host': SystemConfiguration.get_value(
            SystemConfiguration.OLLAMA_HOST, 
            'http://localhost:11434'
        ),
        'models': {
            'general': general_model,
            'biomedical': biomedical_model,
            'analysis': analysis_model,
        },
        'timeout': int(SystemConfiguration.get_value(
            SystemConfiguration.OLLAMA_TIMEOUT, 
            30
        )),
        'max_retries': 3
    }



================================================
File: ncbi_chat/templates/base.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NCBI Multi-Agent Research System</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <style>
        .status-dot {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        .status-dot.online { background-color: #28a745; }
        .status-dot.busy { background-color: #ffc107; }
        .status-dot.error { background-color: #dc3545; }
        .status-dot.offline { background-color: #6c757d; }
        
        .messages-container {
            height: 60vh;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 1rem;
            background: #fff;
        }
        
        .message {
            margin-bottom: 1rem;
        }
        
        .chat-container {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="{% url 'ncbi_chat:chat' %}">NCBI Multi-Agent Research System</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'ncbi_chat:chat' %}">Chat</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'ncbi_chat:agent_list' %}">Agents</a>
                    </li>
                </ul>
                <div class="navbar-nav">
                    {% if user.is_authenticated %}
                        <span class="nav-item nav-link text-light">Welcome, {{ user.username }}</span>
                        <a class="nav-item nav-link" href="{% url 'logout' %}">Logout</a>
                    {% else %}
                        <a class="nav-item nav-link" href="{% url 'login' %}">Login</a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    {% block content %}{% endblock %}

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>



================================================
File: ncbi_chat/templates/ncbi_chat/agent_detail.html
================================================
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">
                        {{ agent.name }}
                        <span class="status-dot {{ agent.status }} float-end mt-2"></span>
                    </h3>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h5>Agent Details</h5>
                            <ul class="list-unstyled">
                                <li><strong>Type:</strong> {{ agent.agent_type }}</li>
                                <li><strong>Status:</strong> {{ agent.status|title }}</li>
                                <li><strong>Last Heartbeat:</strong> {{ agent.last_heartbeat|timesince }} ago</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h5>Performance Metrics</h5>
                            <ul class="list-unstyled">
                                {% for metric, value in agent.performance_metrics.items %}
                                <li><strong>{{ metric|title }}:</strong> {{ value }}</li>
                                {% empty %}
                                <li>No metrics available</li>
                                {% endfor %}
                            </ul>
                        </div>
                    </div>

                    <h5>Available Tools</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Tool Name</th>
                                    <th>Status</th>
                                    <th>Last Execution</th>
                                    <th>Execution Count</th>
                                    <th>Avg. Execution Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for tool in tools %}
                                <tr>
                                    <td>{{ tool.name }}</td>
                                    <td>
                                        <span class="badge bg-{{ tool.status }}">
                                            {{ tool.status|title }}
                                        </span>
                                    </td>
                                    <td>{{ tool.last_execution|default_if_none:"Never" }}</td>
                                    <td>{{ tool.execution_count }}</td>
                                    <td>{{ tool.average_execution_time|floatformat:2 }}s</td>
                                </tr>
                                {% empty %}
                                <tr>
                                    <td colspan="5" class="text-center">No tools available</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-4">
                        <a href="{% url 'ncbi_chat:agent_list' %}" class="btn btn-outline-primary">
                            Back to Agent List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}



================================================
File: ncbi_chat/templates/ncbi_chat/agent_list.html
================================================
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2 class="mb-4">Active Agents</h2>
    
    <div class="row">
        {% for agent in agents %}
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">{{ agent.name }}</h5>
                    <span class="status-dot {{ agent.status }}"></span>
                </div>
                <div class="card-body">
                    <p><strong>Type:</strong> {{ agent.agent_type }}</p>
                    <p><strong>Status:</strong> {{ agent.status|title }}</p>
                    <p><strong>Last Heartbeat:</strong> {{ agent.last_heartbeat|timesince }} ago</p>
                    
                    <h6 class="mt-3">Active Tools</h6>
                    <ul class="list-unstyled">
                        {% for tool in agent.get_active_tools %}
                        <li>
                            <span class="badge bg-primary">{{ tool.name }}</span>
                        </li>
                        {% empty %}
                        <li>No active tools</li>
                        {% endfor %}
                    </ul>
                    
                    <a href="{% url 'ncbi_chat:agent_detail' agent.id %}" class="btn btn-outline-primary">View Details</a>
                </div>
            </div>
        </div>
        {% empty %}
        <div class="col">
            <div class="alert alert-info">No agents are currently registered.</div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}



================================================
File: ncbi_chat/templates/ncbi_chat/chat.html
================================================
{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <!-- Left Sidebar -->
        <div class="col-md-3 bg-light p-3">
            <div class="card mb-3">
                <div class="card-header">Agent Status</div>
                <div class="card-body">
                    <div id="agent-status">
                        {% for agent in agents %}
                        <div class="agent-item mb-2">
                            <span class="status-dot {{ agent.status }}"></span>
                            {{ agent.name }} ({{ agent.agent_type }})
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
            
            <div class="card mb-3">
                <div class="card-header">Quick Actions</div>
                <div class="card-body">
                    <button class="btn btn-outline-primary mb-2 w-100" onclick="sendPresetQuery('literature-search')">
                        Literature Search
                    </button>
                    <button class="btn btn-outline-primary mb-2 w-100" onclick="sendPresetQuery('gene-lookup')">
                        Gene Lookup
                    </button>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">Model Selection</div>
                <div class="card-body">
                    <select id="model-selector" class="form-select mb-2">
                        <option value="llama3.2:latest">llama3.2 Latest (2.0 GB)</option>
                        <option value="llama3.2:1b">llama3.2 1B (1.3 GB)</option>
                    </select>
                    <div class="form-text">
                        Select an Ollama model to use for responses. Larger models may provide better results but take longer to respond.
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Main Chat Area -->
        <div class="col-md-6 p-3">
            <div class="chat-container">
                <div id="chat-messages" class="messages-container mb-3">
                    <div class="welcome-message alert alert-info">
                        Welcome to NCBI Multi-Agent Research System. 
                        Ask me about biomedical research topics, and I'll help you find relevant information.
                    </div>
                </div>
                
                <div class="query-form">
                    <div class="input-group">
                        <input type="text" id="query-input" class="form-control" 
                               placeholder="Enter your research query..." 
                               aria-label="Research query">
                        <button class="btn btn-primary" onclick="sendQuery()">
                            <i class="fas fa-paper-plane"></i> Send
                        </button>
                    </div>
                    <div class="form-text">
                        Example: "Find recent clinical trials about CRISPR gene editing in cancer therapy"
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Right Sidebar -->
        <div class="col-md-3 bg-light p-3">
            <div class="card mb-3">
                <div class="card-header">Active Tools</div>
                <div class="card-body">
                    <div id="active-tools"></div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">Search Filters</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Date Range</label>
                        <input type="date" class="form-control mb-2" id="date-from">
                        <input type="date" class="form-control" id="date-to">
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Study Types</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="clinical-trial" id="filter-clinical-trial">
                            <label class="form-check-label" for="filter-clinical-trial">
                                Clinical Trials
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="review" id="filter-review">
                            <label class="form-check-label" for="filter-review">
                                Reviews
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    let chatSocket = null;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 5;
    const reconnectDelay = 2000; // 2 seconds
    let selectedModel = 'llama3.2:latest'; // Default to the latest model

    function connectWebSocket() {
        // Check if there's an existing connection
        if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
            return;
        }

        // Create new WebSocket connection
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        chatSocket = new WebSocket(
            `${protocol}//${window.location.host}/ws/chat/`
        );

        chatSocket.onopen = function(e) {
            console.log('WebSocket connected successfully');
            reconnectAttempts = 0;
            clearErrorMessages();
        };

        chatSocket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            
            // Handle authentication errors
            if (data.type === 'error' && data.message === 'Authentication required') {
                window.location.href = '/login/?next=' + window.location.pathname;
                return;
            }
            
            handleWebSocketMessage(data);
        };

        chatSocket.onclose = function(e) {
            console.log('WebSocket closed. Attempting to reconnect...');
            if (reconnectAttempts < maxReconnectAttempts) {
                reconnectAttempts++;
                showErrorMessage(`Connection lost. Reconnecting (attempt ${reconnectAttempts}/${maxReconnectAttempts})...`);
                setTimeout(connectWebSocket, reconnectDelay * reconnectAttempts);
            } else {
                showErrorMessage('Connection lost. Please refresh the page to try again.');
            }
        };

        chatSocket.onerror = function(e) {
            console.error('WebSocket error:', e);
            showErrorMessage('Connection error occurred.');
        };
    }

    function clearErrorMessages() {
        const errors = document.querySelectorAll('.connection-error');
        errors.forEach(error => error.remove());
    }

    function showErrorMessage(message) {
        clearErrorMessages();
        const messagesDiv = document.querySelector('#chat-messages');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'alert alert-danger connection-error';
        errorDiv.textContent = message;
        messagesDiv.appendChild(errorDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function handleWebSocketMessage(data) {
        const messagesDiv = document.querySelector('#chat-messages');
        let messageHtml = '';
        
        // Remove typing indicator if present
        const typingIndicator = document.querySelector('#typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }

        switch(data.type) {
            case 'query_received':
                messageHtml = `
                    <div class="message user-message mb-3">
                        <div class="message-content">
                            <div class="message-text">${data.message}</div>
                            <div class="message-meta text-muted small">
                                Query ID: ${data.query_id}
                            </div>
                        </div>
                    </div>`;
                break;
            case 'processing_update':
                messageHtml = `
                    <div class="message system-message mb-3">
                        <div class="message-content">
                            <div class="message-text">${data.message}</div>
                            <div class="message-meta text-muted small">
                                Model: ${data.model_used || 'default'}
                            </div>
                        </div>
                    </div>`;
                break;
            case 'error':
                messageHtml = `
                    <div class="message error-message mb-3">
                        <div class="message-content">
                            <div class="alert alert-danger mb-0">
                                ${data.message}
                            </div>
                        </div>
                    </div>`;
                break;
        }
        
        if (messageHtml) {
            messagesDiv.innerHTML += messageHtml;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
    }

    // Update model selection
    document.getElementById('model-selector').addEventListener('change', function(e) {
        selectedModel = e.target.value;
    });

    function sendQuery() {
        const inputField = document.querySelector('#query-input');
        const message = inputField.value.trim();
        
        if (message && chatSocket && chatSocket.readyState === WebSocket.OPEN) {
            chatSocket.send(JSON.stringify({
                'message': message,
                'model': selectedModel
            }));
            inputField.value = '';
            
            // Show typing indicator
            const messagesDiv = document.querySelector('#chat-messages');
            messagesDiv.innerHTML += `
                <div class="message system-message mb-3" id="typing-indicator">
                    <div class="typing-indicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>`;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        } else if (!chatSocket || chatSocket.readyState !== WebSocket.OPEN) {
            showErrorMessage('Not connected to server. Attempting to reconnect...');
            connectWebSocket();
        }
    }

    function sendPresetQuery(queryType) {
        const presetQueries = {
            'literature-search': 'Find recent publications about CRISPR gene editing in cancer therapy',
            'gene-lookup': 'Show information about the BRCA1 gene and its variants'
        };
        
        const query = presetQueries[queryType];
        if (query) {
            const inputField = document.querySelector('#query-input');
            inputField.value = query;
            sendQuery();
        }
    }

    // Initialize WebSocket connection when page loads
    document.addEventListener('DOMContentLoaded', function() {
        connectWebSocket();
    });

    // Handle Enter key
    document.querySelector('#query-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendQuery();
        }
    });
</script>

<style>
    .messages-container {
        height: 60vh;
        overflow-y: auto;
        padding: 1rem;
        background: #fff;
        border: 1px solid #dee2e6;
        border-radius: 4px;
    }
    
    .message {
        margin-bottom: 1rem;
    }
    
    .user-message {
        text-align: right;
    }
    
    .system-message {
        text-align: left;
    }
    
    .message-content {
        display: inline-block;
        max-width: 80%;
        padding: 0.5rem;
    }
    
    .typing-indicator {
        display: inline-block;
        padding: 0.5rem 1rem;
        background: #f1f3f5;
        border-radius: 1rem;
    }
    
    .typing-indicator span {
        display: inline-block;
        width: 8px;
        height: 8px;
        background: #adb5bd;
        border-radius: 50%;
        margin: 0 2px;
        animation: typing 1s infinite;
    }
    
    .typing-indicator span:nth-child(2) { animation-delay: 0.2s; }
    .typing-indicator span:nth-child(3) { animation-delay: 0.4s; }
    
    @keyframes typing {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-5px); }
    }
</style>
{% endblock %}



================================================
File: ncbi_chat/templates/registration/login.html
================================================
{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4 class="text-center">Login</h4>
                </div>
                <div class="card-body">
                    <form method="post" action="{% url 'login' %}">
                        {% csrf_token %}
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" name="username" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" name="password" class="form-control" required>
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                        <input type="hidden" name="next" value="{{ next }}">
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}


